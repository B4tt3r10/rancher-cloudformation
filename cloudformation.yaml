Mappings:
  RegionMap:
    ap-northeast-1:
      AMI: ami-dd9240bc
    ap-southeast-1:
      AMI: ami-7d983d1e
    eu-central-1:
      AMI: ami-8b03fee4
    eu-west-1:
      AMI: ami-47790334
    sa-east-1:
      AMI: ami-b9a734d5
    us-east-1:
      AMI: ami-a3641cb4
    us-west-1:
      AMI: ami-26074946
    cn-north-1:
      AMI: ami-5c875331
    us-gov-west:
      AMI: ami-015ee760
    ap-southeast-2:
      AMI: ami-550c3c36
    us-west-2:
      AMI: ami-e1fe2281

  Profiles:
    test:
      InitialClusterSize: 3
      DBAllocatedStorage: 10
      DBBackupRetentionPeriod: 0
      DBInstanceType: db.t2.medium
      RancherInstanceType: t2.large
      ClusterInstanceType: t2.large
      DBMultiAZ: false

    preprod:
      InitialClusterSize: 3
      DBAllocatedStorage: 10
      DBBackupRetentionPeriod: 1
      DBInstanceType: db.m3.large
      RancherInstanceType: m3.large
      ClusterInstanceType: m3.xlarge
      DBMultiAZ: true

    prod:
      InitialClusterSize: 3
      DBAllocatedStorage: 10
      DBBackupRetentionPeriod: 7
      DBInstanceType: db.m3.large
      RancherInstanceType: c3.2xlarge
      ClusterInstanceType: m3.2xlarge
      DBMultiAZ: true

Outputs:
  AWSRegion:
    Description: AWS region where the cluster is hosted
    Value: !Ref "AWS::Region"

  DBHost:
    Description: Host of Rancher's database
    Value: !GetAtt [ RancherDB, Endpoint.Address ]

  DBPort:
    Description: Port of Rancher's database
    Value: !GetAtt [ RancherDB, Endpoint.Port ]


Parameters:
  AllowSSHFrom:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    Default: "0.0.0.0/0"
    Description: "The net block (CIDR) that SSH is available to."
    MaxLength: "18"
    MinLength: "9"
    Type: "String"

  Profile:
    Default: test
    AllowedValues: 
      - prod
      - preprod
      - test
      - stress
    Default: "test"
    Description: "Cluster profile (in prod, preprod, test or stress)"
    Type: "String"

  KeyPair:
    Description: The name of an EC2 Key Pair to allow SSH access to the instance
    Type: String


  HostedZone: 
    Description: The name of the zone where we put DNS recordsets
    Default: io.nuxeo.com
    Type: String

  RancherEndPoint:
    Description: Rancher endpoint in the hosted zone
    Default: rancherdev.io.nuxeo.com
    Type: String

  GogetaCatchall:
    Description: Catchall adress in the hosted zone to Gogeta instances    
    Default: "*.dev.io.nuxeo.com"
    ConstraintDescription: "must start with a *."
    AllowedPattern: "\\*\\..*"
    Type: String





Resources:

  
  # Define the global VPC
  CloudVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"



  CloudIG:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-internet-gateway"
      
  IgAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref CloudIG
      VpcId: !Ref CloudVPC

  PublicRouteTable:
    DependsOn: IgAttachment
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CloudVPC
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-route-table"
      
  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CloudIG
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: "10.0.0.0/24"
      VpcId: !Ref CloudVPC      
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnetA"      

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: "10.0.1.0/24"
      VpcId: !Ref CloudVPC      
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnetB"    



  PublicSubnetARouteAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB


  NatEIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatEIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  
  NatGatewayA:
    DependsOn: IgAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [ NatEIPA, AllocationId ]        
      SubnetId: !Ref PublicSubnetA        
  
  NatGatewayB:
    DependsOn: IgAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [ NatEIPB, AllocationId ]        
      SubnetId: !Ref PublicSubnetB        
  

  PrivateRouteTableA: 
    DependsOn: IgAttachment
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CloudVPC
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-route-tableA"

  PrivateInternetRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateRouteTableA      

  PrivateRouteTableB: 
    DependsOn: IgAttachment
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CloudVPC
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-route-tableB"

  PrivateInternetRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateRouteTableB      

  
  
  # Bastion infrastructure
  # The bastion is used to proxy ssh connections to all the other
  # hosts in the VPC.    
  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable SSH access via port 22"
      SecurityGroupIngress: 
        - { CidrIp: "0.0.0.0/0", FromPort: "22", IpProtocol: "tcp", ToPort: "22"}
      VpcId: !Ref CloudVPC
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-bastion-sg"

  ELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable HTTP access to ELBs"
      SecurityGroupIngress: 
        - { CidrIp: "0.0.0.0/0", FromPort: "80", IpProtocol: "tcp", ToPort: "80"}
        - { CidrIp: "0.0.0.0/0", FromPort: "443", IpProtocol: "tcp", ToPort: "443"}
        - { CidrIp: "0.0.0.0/0", FromPort: "8080", IpProtocol: "tcp", ToPort: "8080"}
      VpcId: !Ref CloudVPC
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-elb-sg"




  BastionInstance:
    Type: "AWS::EC2::Instance"
    DependsOn: IgAttachment
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", AMI ]          
      InstanceType: "t2.medium"
      KeyName: !Ref KeyPair
      UserData: ""
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: [ !Ref "BastionSG" ]
          SubnetId: !Ref "PublicSubnetA"
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-bastion-instance"
        - Key: Role
          Value: bastion
      
  

  # Rancher HA infrastructure
  # Rancher server has its own infrastructure
  # 2 App server + 1 Aurora DB
  RancherSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: "10.0.2.0/24"
      VpcId: !Ref CloudVPC
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-rancher-subnet-a"      
  
  RancherSubnetARouteAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref RancherSubnetA

  RancherSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: "10.0.3.0/24"
      VpcId: !Ref CloudVPC
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-rancher-subnet-b"      
  
  RancherSubnetBRouteAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref RancherSubnetB

  RancherSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable SSH access via port 22"
      SecurityGroupIngress: 
        - SourceSecurityGroupId: !Ref BastionSG
          FromPort: "22"
          IpProtocol: "tcp"
          ToPort: "22"
        - SourceSecurityGroupId: !Ref ELBSG
          FromPort: "8080"
          IpProtocol: "tcp"
          ToPort: "8080"
        - SourceSecurityGroupId: !Ref ELBSG
          FromPort: "80"
          IpProtocol: "tcp"
          ToPort: "8080"
        - SourceSecurityGroupId: !Ref ELBSG
          FromPort: "443"
          IpProtocol: "tcp"
          ToPort: "8080"      
      VpcId: !Ref CloudVPC
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-rancher-sg"      

  RancherSGAllowAllInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref RancherSG
      GroupId: !Ref RancherSG

  RancherSGAllowAllFromCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterSG
      GroupId: !Ref RancherSG

  RancherSGAllowAllInternalUDP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      ToPort: 65535
      IpProtocol: udp
      SourceSecurityGroupId: !Ref RancherSG
      GroupId: !Ref RancherSG

  RancherSGAllowAllICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      ToPort: -1
      IpProtocol: icmp
      SourceSecurityGroupId: !Ref RancherSG
      GroupId: !Ref RancherSG

  RancherDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Sub "${AWS::StackName}-db rancher DB subnet group" 
      SubnetIds:
        - !Ref RancherSubnetA
        - !Ref RancherSubnetB
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-rancher-db-subnet"      

  RancherDB:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: "mysql"
      DBInstanceIdentifier: !Sub "${AWS::StackName}-db"
      DBName: "rancherdb"
      DBSubnetGroupName: !Ref RancherDBSubnetGroup
      AllocatedStorage: !FindInMap [ Profiles, !Ref Profile, DBAllocatedStorage ]
      VPCSecurityGroups: 
        - !Ref RancherSG
      BackupRetentionPeriod: !FindInMap [ Profiles, !Ref Profile, DBBackupRetentionPeriod ]
      DBInstanceClass: !FindInMap [ Profiles, !Ref Profile, DBInstanceType ]
      MultiAZ: !FindInMap [ Profiles, !Ref Profile, DBMultiAZ ]
      MasterUsername: rancher
      MasterUserPassword: rancherpassword
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-rancher-db"
        - Key: Role
          Value: rancherdb

  RancherHttpLB:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    DependsOn: IgAttachment
    Properties:
      ConnectionDrainingPolicy:
        Enabled: "true"
        Timeout: "300"
      CrossZone: true
      HealthCheck:
        HealthyThreshold: "3"
        Interval: "30"
        Target: TCP:80
        Timeout: "5"
        UnhealthyThreshold: "5"

      Listeners:
        - InstancePort: 80
          LoadBalancerPort: 80
          Protocol: TCP
        - InstancePort: 443
          LoadBalancerPort: 443
          Protocol: TCP
        - InstancePort: 8080
          LoadBalancerPort: 8080
          Protocol: TCP
      SecurityGroups: 
        - !Ref "ELBSG"
      Subnets:
        - !Ref "PublicSubnetA"        
        - !Ref "PublicSubnetB"        
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-rancher-http-lb"      


  RancherClusterAutoScale:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: 
        - !Select [ 0, !GetAZs  ""]
        - !Select [ 1, !GetAZs  ""]
      DesiredCapacity: 3
      LaunchConfigurationName: !Ref "RancherClusterLaunchConfig"
      LoadBalancerNames: [!Ref "RancherHttpLB"]
      MaxSize: 3
      MinSize: 1
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub "${AWS::StackName}-rancher-autoscale"      
          PropagateAtLaunch: true
        - Key: Role
          Value: rancherserver
      VPCZoneIdentifier: 
         - !Ref "RancherSubnetA"
         - !Ref "RancherSubnetB"
         
  RancherClusterLaunchConfig:  
    Type: "AWS::AutoScaling::LaunchConfiguration"    
    Properties:
      AssociatePublicIpAddress: false
      BlockDeviceMappings: 
        - DeviceName: "/dev/sda1"
          Ebs: 
            DeleteOnTermination:  true
            VolumeSize: "20"
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", AMI ]
      InstanceType: !FindInMap [ Profiles, !Ref Profile, RancherInstanceType ]
      KeyName: !Ref KeyPair
      SecurityGroups: 
        - !Ref "RancherSG"
      UserData: 
        Fn::Base64:
          !Sub
            - |
              #!/bin/bash

              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates
              sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D

              echo deb https://apt.dockerproject.org/repo ubuntu-wily main > /etc/apt/sources.list.d/docker.list

              sudo apt-get update
              sudo apt-get purge lxc-docker
              apt-cache policy docker-engine

              sudo apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual
              sudo apt-get install -y docker-engine
              sudo service docker start

              sudo systemctl enable docker

              #sudo docker run -d -p 8080:8080 \
              #  -e CATTLE_DB_CATTLE_MYSQL_HOST=${mysqlhost} \
              #  -e CATTLE_DB_CATTLE_MYSQL_PORT=${mysqlport} \
              #  -e CATTLE_DB_CATTLE_MYSQL_NAME=rancherdb \
              #  -e CATTLE_DB_CATTLE_USERNAME=rancher \
              #  -e CATTLE_DB_CATTLE_PASSWORD=rancherpassword \
              #  -v /var/run/docker.sock:/var/run/docker.sock \
              #  --name rancher-server \
              #   rancher/server
            - mysqlhost: !GetAtt [ RancherDB, Endpoint.Address ]
              mysqlport: !GetAtt [ RancherDB, Endpoint.Port ] 


  ClusterSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: "10.0.10.0/24"
      VpcId: !Ref CloudVPC
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-cluster-subnet-a"      
  
  ClusterSubnetARouteAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref ClusterSubnetA

  ClusterSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: "10.0.11.0/24"
      VpcId: !Ref CloudVPC
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-cluster-subnet-b"      
  
  ClusterSubnetBRouteAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref ClusterSubnetB

  ClusterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for the cluster"
      SecurityGroupIngress: 
        - SourceSecurityGroupId: !Ref BastionSG
          FromPort: "22"
          IpProtocol: "tcp"
          ToPort: "22"
        - SourceSecurityGroupId: !Ref ELBSG
          FromPort: "7777"
          IpProtocol: "tcp"
          ToPort: "7777"
        - SourceSecurityGroupId: !Ref RancherSG
          FromPort: "0"
          IpProtocol: "tcp"
          ToPort: "65535"
      VpcId: !Ref CloudVPC
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-cluster-sg"      

  ClusterSGAllowAllInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterSG
      GroupId: !Ref ClusterSG
  
  ClusterSGAllowAllInternalUDP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 0
      ToPort: 65535
      IpProtocol: udp
      SourceSecurityGroupId: !Ref ClusterSG
      GroupId: !Ref ClusterSG

  ClusterSGAllowAllICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      ToPort: -1
      IpProtocol: icmp
      SourceSecurityGroupId: !Ref ClusterSG
      GroupId: !Ref ClusterSG

  
  GogetaHttpLB:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    DependsOn: IgAttachment
    Properties:
      ConnectionDrainingPolicy:
        Enabled: "true"
        Timeout: "300"
      CrossZone: true
      HealthCheck:
        HealthyThreshold: "3"
        Interval: "30"
        Target: TCP:7777
        Timeout: "5"
        UnhealthyThreshold: "5"

      Listeners:
        - InstancePort: 7777
          LoadBalancerPort: 80
          Protocol: HTTP
      SecurityGroups: 
        - !Ref "ELBSG"
      Subnets:
        - !Ref "PublicSubnetA"        
        - !Ref "PublicSubnetB"        
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub "${AWS::StackName}-gogeta-http-lb"      


  AgentClusterAutoScale:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: 
        - !Select [ 0, !GetAZs  ""]
        - !Select [ 1, !GetAZs  ""]
      DesiredCapacity: !FindInMap [ Profiles, !Ref Profile, InitialClusterSize ]
      LaunchConfigurationName: !Ref "AgentClusterLaunchConfig"
      LoadBalancerNames: [!Ref "GogetaHttpLB"]
      MaxSize: 12
      MinSize: 1
      Tags: 
        - Key: IoCluster
          Value: !Ref "AWS::StackName"
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub "${AWS::StackName}-rancher-agent-autoscale"      
          PropagateAtLaunch: true
        - Key: Role
          Value: rancheragent
      VPCZoneIdentifier: 
         - !Ref "ClusterSubnetA"
         - !Ref "ClusterSubnetB"
         
  AgentClusterLaunchConfig:  
    Type: "AWS::AutoScaling::LaunchConfiguration"    
    Properties:
      AssociatePublicIpAddress: false
      BlockDeviceMappings: 
        - DeviceName: "/dev/sda1"
          Ebs: 
            DeleteOnTermination:  true
            VolumeSize: "20"
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", AMI ]
      InstanceType: !FindInMap [ Profiles, !Ref Profile, ClusterInstanceType ]
      KeyName: !Ref KeyPair
      SecurityGroups: 
        - !Ref "RancherSG"
      UserData: 
        Fn::Base64:
          !Sub
            - |
              #!/bin/bash

              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates
              sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D

              echo deb https://apt.dockerproject.org/repo ubuntu-wily main > /etc/apt/sources.list.d/docker.list

              sudo apt-get update
              sudo apt-get purge lxc-docker
              apt-cache policy docker-engine

              sudo apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual
              sudo apt-get install -y docker-engine
              sudo service docker start

              sudo systemctl enable docker
            - rancherhost: !Ref RancherEndPoint
              


  RancherDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      Type: CNAME
      TTL: 300
      HostedZoneName: !Sub "${HostedZone}."
      Name: !Ref RancherEndPoint
      ResourceRecords: 
        - !GetAtt [ RancherHttpLB, DNSName ]

  GogetaDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      Type: CNAME
      TTL: 300
      HostedZoneName: !Sub "${HostedZone}."
      Name: !Ref GogetaCatchall
      ResourceRecords: 
        - !GetAtt [ GogetaHttpLB, DNSName ]

